{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleSymbols;\f2\fnil\fcharset134 PingFangSC-Regular;
\f3\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //@version=5\
indicator(title="
\f1 \uc0\u10841 
\f0  Retracement Sniper [Algo Alert]", overlay=false, precision=2, timeframe="", timeframe_gaps=true)\
\
\
\
//======================================================================================================================\
//                                                FAST FOURIER TRANSFORM\
//======================================================================================================================\
\
//Fast Fourier Transform\
import jdehorty/KernelFunctions/2 as kernel\
\
DFT(x, y, Nx, _dir) =>  \
    float _arg = 0.0\
    float _cos = 0.0\
    float _sin = 0.0\
    float xArr_i = 0.0\
    float yArr_i = 0.0\
    xArr = array.new_float(array.size(x))\
    yArr = array.new_float(array.size(y))\
\
    for i = 0 to Nx - 1 by 1\
        xArr_i := 0.0\
        yArr_i := 0.0\
        kx = float(i) / float(Nx)\
        _arg := -_dir * 2 * math.pi * kx\
        for k = 0 to Nx - 1 by 1\
            _cos := math.cos(k * _arg)\
            _sin := math.sin(k * _arg)\
            xArr_i += array.get(x, k) * _cos - array.get(y, k) * _sin\
            yArr_i += array.get(x, k) * _sin + array.get(y, k) * _cos\
            yArr_i\
        array.set(xArr, i, xArr_i)\
        array.set(yArr, i, yArr_i)\
\
    if _dir == 1\
        for i = 0 to Nx - 1 by 1\
            array.set(x, i, array.get(xArr, i) / float(Nx))\
            array.set(y, i, array.get(yArr, i) / float(Nx))\
    else\
        for i = 0 to Nx - 1 by 1\
            array.set(x, i, array.get(xArr, i))\
            array.set(y, i, array.get(yArr, i))\
\
//======================================================================================================================\
//                                                 FOURIER INPUTS\
//======================================================================================================================\
\
N = input.int(6,"Fourier Smoothing Length", group = "Fourier")\
xval = input.source(high,"Higher Source",tooltip = "i.e. the higher source of the discrete Fourier"+\
 " transform", group = "Fourier")\
xval1 = input.source(low,"Lower Source",tooltip = "i.e. the lower source of the discrete Fourier"+\
 " transform", group = "Fourier")\
\
\
//======================================================================================================================\
//                                                 FOURIER CALCULATIONS\
//======================================================================================================================\
\
// Fourier transform\
x = array.new_float(N, 0.0)\
y = array.new_float(N, 0.0)\
for i = 0 to N - 1\
    array.set(x, i, xval[i])\
    array.set(y, i, 0.0)\
\
DFT(x, y, N, 1)\
\
mag = array.new_float(N, 0.0)\
for i = 0 to N - 1\
    mag_i = math.sqrt(math.pow(array.get(x, i), 2) + math.pow(array.get(y, i), 2))\
    array.set(mag, i, mag_i)\
\
dfth = array.get(mag,0)\
\
// Fourier transform\
x := array.new_float(N, 0.0)\
y := array.new_float(N, 0.0)\
for i = 0 to N - 1\
    array.set(x, i, xval1[i])\
    array.set(y, i, 0.0)\
\
DFT(x, y, N, 1)\
\
mag := array.new_float(N, 0.0)\
for i = 0 to N - 1\
    mag_i = math.sqrt(math.pow(array.get(x, i), 2) + math.pow(array.get(y, i), 2))\
    array.set(mag, i, mag_i)\
\
dftl = array.get(mag,0)\
\
green = #ffffff //#00ffbb\
red = #ff1100\
\
\
length = input.int(45, minval=1, group = "Retracement Algorithm")\
upper = (100 * (ta.highestbars(dfth, length) + length)/length)-50\
lower = (100 * (ta.lowestbars(dftl, length) + length)/length)-50\
\
////////////////////////////////////////////volatility\
src = input.source(close, "volatility source", group = "Retracement Algorithm")\
basis = ta.sma(src, 20)\
dev = 2 * ta.stdev(src, 20)\
up = basis + dev\
down = basis - dev\
bbw = (up-down)/basis\
bbwma = ta.ema(bbw, 100)\
\
volatile = bbw > bbwma\
\
u = plot(upper < 0 ? na : upper, "Up Trend", color= upper < 48 ? color.new(green, 60) : green, style = plot.style_histogram, linewidth = 3)\
l = plot(lower < 0 ? na : -lower, "Down Trend", color= -lower > -48 ? color.new(red, 60) : red, style = plot.style_histogram, linewidth = 3)\
\
hu = plot(48, color = color.new(color.gray, 50), display = display.none)\
mh = plot(0, display = display.none)\
hl = plot(-48, color = color.new(color.gray, 50), display = display.none)\
\
//, display = display.none\
\
//fill(u,l, upper > lower ? color.new(vzocolorgreen, 90) : color.new(vzocolorred, 90))\
fill(hu, hl, top_value = 48, bottom_value = 20, top_color = color.new(red, 60), bottom_color = color.new(red, 100))\
fill(hl, mh, top_value = -20, bottom_value = -48, top_color = color.new(green, 100), bottom_color = color.new(green, 60))\
\
candlelen = math.abs(close-open)\
upcandle = close > open\
\
bullretrace = ta.crossover(-lower, -48) and volatile ///or (-lower < -48 and ((upcandle and candlelen > candlelen[1])))  //or (upcandle and upcandle[1])))\
bearretrace = ta.crossunder(upper, 48) and volatile ///or (upper > 48 and ((not upcandle and candlelen > candlelen[1])))  //or (not upcandle and not upcandle[1])))\
bullretraceweak = ta.crossover(-lower, -48) and not volatile\
bearretraceweak = ta.crossunder(upper, 48) and not volatile\
\
\
plotchar(bullretrace ? -55 : na, char = "
\f2 \'a1\'f8
\f0 ", title = "volatility based reversal", color = green, location = location.absolute, size = size.tiny)\
plotchar(bearretrace ? 55 : na, char = "
\f3 \uc0\u9660 
\f0 ", title = "volatility based reversal", color = red, location = location.absolute, size = size.tiny)\
plotchar(bullretraceweak ? -55 : na, char = "
\f1 \uc0\u8743 
\f0 ", title = "momentum based reversal", color = green, location = location.absolute, size = size.tiny)\
plotchar(bearretraceweak ? 55 : na, char = "
\f1 \uc0\u8744 
\f0 ", title = "momentum based reversal", color = red, location = location.absolute, size = size.tiny)\
\
alertcondition(ta.crossover(upper, 0), "Uptrend", "Price is trending up")\
alertcondition(ta.crossover(lower, 0), "Downtrend", "Price is trending down")\
alertcondition(bullretrace, "Bullish Reversal", "Bullish Reversal")\
alertcondition(bearretrace, "Bearish Reversal", "Bearish Reversal")\
alertcondition(bullretraceweak, "Weak Bullish Reversal", "Weak Bullish Reversal")\
alertcondition(bearretraceweak, "Weak Bearish Reversal", "Weak Bearish Reversal")}